// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionCancelled extends ethereum.Event {
  get params(): AuctionCancelled__Params {
    return new AuctionCancelled__Params(this);
  }
}

export class AuctionCancelled__Params {
  _event: AuctionCancelled;

  constructor(event: AuctionCancelled) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BalanceUpdated extends ethereum.Event {
  get params(): BalanceUpdated__Params {
    return new BalanceUpdated__Params(this);
  }
}

export class BalanceUpdated__Params {
  _event: BalanceUpdated;

  constructor(event: BalanceUpdated) {
    this._event = event;
  }

  get accountOf(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BidPlaced extends ethereum.Event {
  get params(): BidPlaced__Params {
    return new BidPlaced__Params(this);
  }
}

export class BidPlaced__Params {
  _event: BidPlaced;

  constructor(event: BidPlaced) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ClaimAuctionNFT extends ethereum.Event {
  get params(): ClaimAuctionNFT__Params {
    return new ClaimAuctionNFT__Params(this);
  }
}

export class ClaimAuctionNFT__Params {
  _event: ClaimAuctionNFT;

  constructor(event: ClaimAuctionNFT) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get claimer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClaimFunds extends ethereum.Event {
  get params(): ClaimFunds__Params {
    return new ClaimFunds__Params(this);
  }
}

export class ClaimFunds__Params {
  _event: ClaimFunds;

  constructor(event: ClaimFunds) {
    this._event = event;
  }

  get accountOf(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimSaleNFTs extends ethereum.Event {
  get params(): ClaimSaleNFTs__Params {
    return new ClaimSaleNFTs__Params(this);
  }
}

export class ClaimSaleNFTs__Params {
  _event: ClaimSaleNFTs;

  constructor(event: ClaimSaleNFTs) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewAuction extends ethereum.Event {
  get params(): NewAuction__Params {
    return new NewAuction__Params(this);
  }
}

export class NewAuction__Params {
  _event: NewAuction;

  constructor(event: NewAuction) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newAuction(): NewAuctionNewAuctionStruct {
    return changetype<NewAuctionNewAuctionStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class NewAuctionNewAuctionStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get nftId(): BigInt {
    return this[1].toBigInt();
  }

  get isERC721(): boolean {
    return this[2].toBoolean();
  }

  get nftAddress(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get startTime(): BigInt {
    return this[6].toBigInt();
  }

  get endTime(): BigInt {
    return this[7].toBigInt();
  }

  get reservePrice(): BigInt {
    return this[8].toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Purchase extends ethereum.Event {
  get params(): Purchase__Params {
    return new Purchase__Params(this);
  }
}

export class Purchase__Params {
  _event: Purchase;

  constructor(event: Purchase) {
    this._event = event;
  }

  get saleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get purchaser(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SaleCancelled extends ethereum.Event {
  get params(): SaleCancelled__Params {
    return new SaleCancelled__Params(this);
  }
}

export class SaleCancelled__Params {
  _event: SaleCancelled;

  constructor(event: SaleCancelled) {
    this._event = event;
  }

  get saleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SaleCreated extends ethereum.Event {
  get params(): SaleCreated__Params {
    return new SaleCreated__Params(this);
  }
}

export class SaleCreated__Params {
  _event: SaleCreated;

  constructor(event: SaleCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Marketplace__auctionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: Address;
  value4: Address;
  value5: Address;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: Address,
    value4: Address,
    value5: Address,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getNftId(): BigInt {
    return this.value1;
  }

  getIsERC721(): boolean {
    return this.value2;
  }

  getNftAddress(): Address {
    return this.value3;
  }

  getOwner(): Address {
    return this.value4;
  }

  getCurrency(): Address {
    return this.value5;
  }

  getStartTime(): BigInt {
    return this.value6;
  }

  getEndTime(): BigInt {
    return this.value7;
  }

  getReservePrice(): BigInt {
    return this.value8;
  }
}

export class Marketplace__bidsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getTimestamp(): BigInt {
    return this.value1;
  }
}

export class Marketplace__getAuctionsResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get nftId(): BigInt {
    return this[1].toBigInt();
  }

  get isERC721(): boolean {
    return this[2].toBoolean();
  }

  get nftAddress(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get startTime(): BigInt {
    return this[6].toBigInt();
  }

  get endTime(): BigInt {
    return this[7].toBigInt();
  }

  get reservePrice(): BigInt {
    return this[8].toBigInt();
  }
}

export class Marketplace__getSalesResultValue0Struct extends ethereum.Tuple {
  get nftId(): BigInt {
    return this[0].toBigInt();
  }

  get isERC721(): boolean {
    return this[1].toBoolean();
  }

  get nftAddress(): Address {
    return this[2].toAddress();
  }

  get owner(): Address {
    return this[3].toAddress();
  }

  get currency(): Address {
    return this[4].toAddress();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get purchased(): BigInt {
    return this[6].toBigInt();
  }

  get startTime(): BigInt {
    return this[7].toBigInt();
  }

  get endTime(): BigInt {
    return this[8].toBigInt();
  }

  get price(): BigInt {
    return this[9].toBigInt();
  }
}

export class Marketplace__salesResult {
  value0: BigInt;
  value1: boolean;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: boolean,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }

  getNftId(): BigInt {
    return this.value0;
  }

  getIsERC721(): boolean {
    return this.value1;
  }

  getNftAddress(): Address {
    return this.value2;
  }

  getOwner(): Address {
    return this.value3;
  }

  getCurrency(): Address {
    return this.value4;
  }

  getAmount(): BigInt {
    return this.value5;
  }

  getPurchased(): BigInt {
    return this.value6;
  }

  getStartTime(): BigInt {
    return this.value7;
  }

  getEndTime(): BigInt {
    return this.value8;
  }

  getPrice(): BigInt {
    return this.value9;
  }
}

export class Marketplace extends ethereum.SmartContract {
  static bind(address: Address): Marketplace {
    return new Marketplace("Marketplace", address);
  }

  auctionIdCounter(): BigInt {
    let result = super.call(
      "auctionIdCounter",
      "auctionIdCounter():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionIdCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionIdCounter",
      "auctionIdCounter():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctions(param0: BigInt): Marketplace__auctionsResult {
    let result = super.call(
      "auctions",
      "auctions(uint256):(uint128,uint128,bool,address,address,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Marketplace__auctionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt()
    );
  }

  try_auctions(
    param0: BigInt
  ): ethereum.CallResult<Marketplace__auctionsResult> {
    let result = super.tryCall(
      "auctions",
      "auctions(uint256):(uint128,uint128,bool,address,address,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Marketplace__auctionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt()
      )
    );
  }

  bids(param0: BigInt, param1: Address): Marketplace__bidsResult {
    let result = super.call("bids", "bids(uint256,address):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return new Marketplace__bidsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_bids(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<Marketplace__bidsResult> {
    let result = super.tryCall(
      "bids",
      "bids(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Marketplace__bidsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  cancelledAuction(param0: BigInt): boolean {
    let result = super.call(
      "cancelledAuction",
      "cancelledAuction(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_cancelledAuction(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "cancelledAuction",
      "cancelledAuction(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cancelledSale(param0: BigInt): boolean {
    let result = super.call("cancelledSale", "cancelledSale(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_cancelledSale(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "cancelledSale",
      "cancelledSale(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claimableFunds(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "claimableFunds",
      "claimableFunds(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_claimableFunds(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimableFunds",
      "claimableFunds(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimed(param0: BigInt): boolean {
    let result = super.call("claimed", "claimed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_claimed(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("claimed", "claimed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createAuction(
    isERC721: boolean,
    nftAddress: Address,
    nftId: BigInt,
    startTime: BigInt,
    endTime: BigInt,
    reservePrice: BigInt,
    currency: Address
  ): BigInt {
    let result = super.call(
      "createAuction",
      "createAuction(bool,address,uint128,uint256,uint256,uint256,address):(uint128)",
      [
        ethereum.Value.fromBoolean(isERC721),
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(nftId),
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(endTime),
        ethereum.Value.fromUnsignedBigInt(reservePrice),
        ethereum.Value.fromAddress(currency)
      ]
    );

    return result[0].toBigInt();
  }

  try_createAuction(
    isERC721: boolean,
    nftAddress: Address,
    nftId: BigInt,
    startTime: BigInt,
    endTime: BigInt,
    reservePrice: BigInt,
    currency: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createAuction",
      "createAuction(bool,address,uint128,uint256,uint256,uint256,address):(uint128)",
      [
        ethereum.Value.fromBoolean(isERC721),
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(nftId),
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(endTime),
        ethereum.Value.fromUnsignedBigInt(reservePrice),
        ethereum.Value.fromAddress(currency)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createSale(
    isERC721: boolean,
    nftAddress: Address,
    nftId: BigInt,
    amount: BigInt,
    startTime: BigInt,
    endTime: BigInt,
    price: BigInt,
    currency: Address
  ): BigInt {
    let result = super.call(
      "createSale",
      "createSale(bool,address,uint128,uint256,uint256,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromBoolean(isERC721),
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(nftId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(endTime),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromAddress(currency)
      ]
    );

    return result[0].toBigInt();
  }

  try_createSale(
    isERC721: boolean,
    nftAddress: Address,
    nftId: BigInt,
    amount: BigInt,
    startTime: BigInt,
    endTime: BigInt,
    price: BigInt,
    currency: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createSale",
      "createSale(bool,address,uint128,uint256,uint256,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromBoolean(isERC721),
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(nftId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(endTime),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromAddress(currency)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  escrow(param0: Address): BigInt {
    let result = super.call("escrow", "escrow(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_escrow(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("escrow", "escrow(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuctionStatus(auctionId: BigInt): Bytes {
    let result = super.call(
      "getAuctionStatus",
      "getAuctionStatus(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );

    return result[0].toBytes();
  }

  try_getAuctionStatus(auctionId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getAuctionStatus",
      "getAuctionStatus(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAuctions(
    pageNo: BigInt,
    pageSize: BigInt
  ): Array<Marketplace__getAuctionsResultValue0Struct> {
    let result = super.call(
      "getAuctions",
      "getAuctions(uint256,uint256):((uint128,uint128,bool,address,address,address,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(pageNo),
        ethereum.Value.fromUnsignedBigInt(pageSize)
      ]
    );

    return result[0].toTupleArray<Marketplace__getAuctionsResultValue0Struct>();
  }

  try_getAuctions(
    pageNo: BigInt,
    pageSize: BigInt
  ): ethereum.CallResult<Array<Marketplace__getAuctionsResultValue0Struct>> {
    let result = super.tryCall(
      "getAuctions",
      "getAuctions(uint256,uint256):((uint128,uint128,bool,address,address,address,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(pageNo),
        ethereum.Value.fromUnsignedBigInt(pageSize)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Marketplace__getAuctionsResultValue0Struct>()
    );
  }

  getSaleStatus(saleId: BigInt): Bytes {
    let result = super.call(
      "getSaleStatus",
      "getSaleStatus(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(saleId)]
    );

    return result[0].toBytes();
  }

  try_getSaleStatus(saleId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getSaleStatus",
      "getSaleStatus(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(saleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSales(
    pageNo: BigInt,
    pageSize: BigInt
  ): Array<Marketplace__getSalesResultValue0Struct> {
    let result = super.call(
      "getSales",
      "getSales(uint256,uint256):((uint128,bool,address,address,address,uint256,uint256,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(pageNo),
        ethereum.Value.fromUnsignedBigInt(pageSize)
      ]
    );

    return result[0].toTupleArray<Marketplace__getSalesResultValue0Struct>();
  }

  try_getSales(
    pageNo: BigInt,
    pageSize: BigInt
  ): ethereum.CallResult<Array<Marketplace__getSalesResultValue0Struct>> {
    let result = super.tryCall(
      "getSales",
      "getSales(uint256,uint256):((uint128,bool,address,address,address,uint256,uint256,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(pageNo),
        ethereum.Value.fromUnsignedBigInt(pageSize)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Marketplace__getSalesResultValue0Struct>()
    );
  }

  highestBidder(param0: BigInt): Address {
    let result = super.call(
      "highestBidder",
      "highestBidder(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_highestBidder(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "highestBidder",
      "highestBidder(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  purchased(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "purchased",
      "purchased(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_purchased(param0: BigInt, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "purchased",
      "purchased(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  saleIdCounter(): BigInt {
    let result = super.call("saleIdCounter", "saleIdCounter():(uint128)", []);

    return result[0].toBigInt();
  }

  try_saleIdCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "saleIdCounter",
      "saleIdCounter():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sales(param0: BigInt): Marketplace__salesResult {
    let result = super.call(
      "sales",
      "sales(uint256):(uint128,bool,address,address,address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Marketplace__salesResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_sales(param0: BigInt): ethereum.CallResult<Marketplace__salesResult> {
    let result = super.tryCall(
      "sales",
      "sales(uint256):(uint128,bool,address,address,address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Marketplace__salesResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountFromBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get externalFunds(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get saleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amountToBuy(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountFromBalance(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelAuctionCall extends ethereum.Call {
  get inputs(): CancelAuctionCall__Inputs {
    return new CancelAuctionCall__Inputs(this);
  }

  get outputs(): CancelAuctionCall__Outputs {
    return new CancelAuctionCall__Outputs(this);
  }
}

export class CancelAuctionCall__Inputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelAuctionCall__Outputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }
}

export class CancelSaleCall extends ethereum.Call {
  get inputs(): CancelSaleCall__Inputs {
    return new CancelSaleCall__Inputs(this);
  }

  get outputs(): CancelSaleCall__Outputs {
    return new CancelSaleCall__Outputs(this);
  }
}

export class CancelSaleCall__Inputs {
  _call: CancelSaleCall;

  constructor(call: CancelSaleCall) {
    this._call = call;
  }

  get saleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelSaleCall__Outputs {
  _call: CancelSaleCall;

  constructor(call: CancelSaleCall) {
    this._call = call;
  }
}

export class ClaimFundsCall extends ethereum.Call {
  get inputs(): ClaimFundsCall__Inputs {
    return new ClaimFundsCall__Inputs(this);
  }

  get outputs(): ClaimFundsCall__Outputs {
    return new ClaimFundsCall__Outputs(this);
  }
}

export class ClaimFundsCall__Inputs {
  _call: ClaimFundsCall;

  constructor(call: ClaimFundsCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimFundsCall__Outputs {
  _call: ClaimFundsCall;

  constructor(call: ClaimFundsCall) {
    this._call = call;
  }
}

export class ClaimSaleNftsCall extends ethereum.Call {
  get inputs(): ClaimSaleNftsCall__Inputs {
    return new ClaimSaleNftsCall__Inputs(this);
  }

  get outputs(): ClaimSaleNftsCall__Outputs {
    return new ClaimSaleNftsCall__Outputs(this);
  }
}

export class ClaimSaleNftsCall__Inputs {
  _call: ClaimSaleNftsCall;

  constructor(call: ClaimSaleNftsCall) {
    this._call = call;
  }

  get saleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimSaleNftsCall__Outputs {
  _call: ClaimSaleNftsCall;

  constructor(call: ClaimSaleNftsCall) {
    this._call = call;
  }
}

export class CreateAuctionCall extends ethereum.Call {
  get inputs(): CreateAuctionCall__Inputs {
    return new CreateAuctionCall__Inputs(this);
  }

  get outputs(): CreateAuctionCall__Outputs {
    return new CreateAuctionCall__Outputs(this);
  }
}

export class CreateAuctionCall__Inputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get isERC721(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nftId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get reservePrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class CreateAuctionCall__Outputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateSaleCall extends ethereum.Call {
  get inputs(): CreateSaleCall__Inputs {
    return new CreateSaleCall__Inputs(this);
  }

  get outputs(): CreateSaleCall__Outputs {
    return new CreateSaleCall__Outputs(this);
  }
}

export class CreateSaleCall__Inputs {
  _call: CreateSaleCall;

  constructor(call: CreateSaleCall) {
    this._call = call;
  }

  get isERC721(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nftId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class CreateSaleCall__Outputs {
  _call: CreateSaleCall;

  constructor(call: CreateSaleCall) {
    this._call = call;
  }

  get saleId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResolveAuctionCall extends ethereum.Call {
  get inputs(): ResolveAuctionCall__Inputs {
    return new ResolveAuctionCall__Inputs(this);
  }

  get outputs(): ResolveAuctionCall__Outputs {
    return new ResolveAuctionCall__Outputs(this);
  }
}

export class ResolveAuctionCall__Inputs {
  _call: ResolveAuctionCall;

  constructor(call: ResolveAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResolveAuctionCall__Outputs {
  _call: ResolveAuctionCall;

  constructor(call: ResolveAuctionCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
